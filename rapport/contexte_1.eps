%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 635.000000 461.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.3 (assemblage 16D32) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 635 461
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 635 461
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /a put
dup 35 /m put
dup 36 /e put
dup 37 /W put
dup 38 /o put
dup 39 /r put
dup 40 /l put
dup 41 /d put
dup 42 /M put
dup 43 /n put
dup 44 /u put
dup 45 /I put
dup 46 /N put
dup 47 /E put
dup 48 /U put
dup 49 /A put
dup 50 /P put
dup 51 /s put
dup 52 /i put
dup 53 /g put
dup 54 /space put
dup 55 /S put
dup 56 /c put
dup 57 /O put
dup 58 /V put
dup 59 /R put
dup 60 /L put
dup 61 /Y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<







023E002400DE004500DE004503550040022C0040023E0024014D003D01F4001F022C004004BE0037000000480048007800AA013A0154017401BE01FE029E03060396042A0460048004BA04E805F206640702076A081C0846086008FA094209E20A100AB40B040B3A00010000001F0096000900680004000200000000001E00000200042800030001B800142B01BA0002000200162B01BF0003003E0037002B001F00130000001C2B00BF0002004A0037002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 31 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/E 3 def
/G 4 def
/I 5 def
/L 6 def
/M 7 def
/N 8 def
/O 9 def
/P 10 def
/R 11 def
/S 12 def
/U 13 def
/V 14 def
/W 15 def
/Y 16 def
/a 17 def
/c 18 def
/d 19 def
/e 20 def
/g 21 def
/i 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/r 27 def
/s 28 def
/u 29 def
/uni2B91 30 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9310E889D4B294081CFBE92AFCC7FE3BB36C58496644FE561335DE1474FE8AD03205701574C44B4D576342C56A9D706E281EA108DEB8D3620968689F108F42E3465F4907B536F4FE9D04E7B81671C8015D28B6AEAA2F95E411CFBE9B6F24E72233C8DF2ECB36E7674F6B8E54E5B65BFA1B1039DBF09D51A90C058AA8031070F8087A7F7421553868E16A4A4FCFF8AA5804AFA8D3C0609B522EB8F36879B7F701623A3E857CEF6587C44B1A53128082C2DA132495E724E65B606D18FDBC08998D0434B658540537AE778364EE7817376F1E7A4C74A89AAF4F43630D5541142EF186F18E08D2496F15B7B78A49C404A85D166B03CEBC5D75D3A788A24024A52EB077AF8FC628D060B0DF682C1756B2450E746DAA0C908686606C15765AD8B00509512906976A5155CCB5B3BBC49BE2FDCB6178B083E98B7B90EF7DE00E519C5B23C8434D20B1A843C391A904F4B9BBFCB348E37C4F6351FB52A1CB9B8EE23DF18482962A0AA321100CAE4929F69287FED4B423445F0B233BA211F93EB6F207C08511C19B5680472342B850E8DEDA3B39162CF1A5D08A0B1CB03BBCE6C1A3B60BC73C8F1898F5B5C3597732114BAC014A28D6B3A0BC018DB2E21333D1E5B36C6580FC6B644B09E898560546169077BFB959279828F9E30B3A820BBD0AFA4D213C255D018639962B7E1D8BF9ABB8CD1181363761B095847FAD54CEF015B41B5618BC884830C740F06C4E4C8E2A637129DA162415F05DDEBF8CC1D224B7D79875E19F32
17946ECAAE70812E65B8EA4226CF9E297CD3130E28F5AF45E1E0462B543C87648CE9866DF9F18737BDC5B350424EC0CFDA1BA3DE506F123FAA1C6372D6539CB23B4CE95C64277B8CF867842D1C52477D4A5EC95458069B7BD99A225666314273FAF8391EEDFF9CE68A667916BE582827F5FD4B8A9DB7E9E019E7FA57E4CF2E027DFE56A300AB3FAA4112E087B6A9C6785508E7B064041413ADECA280CE5217885DB432395706289BC6110261CFE1AF5701DD38CF5A87A5BFEA5545A978C0CFD6D807C50EF12D17E21977940D767D323B8159BDEC9DEF1D38BDC761BD727D6E85D41BAF5EB71D540932A736078E3F267DBB0A253D46F79194AA2856028899B86CB13E51B06C6D2C15B36A6914B609D4AAC34ECDC1984336B564A9EEAE0B1686718F77293361F9EFC926EAA2FAAD083BCE42ACDC976689FFE3BD933A35F9190A3139EE71C017C5EAA54D6509807CBF26E63449CA4DF2276935CA63CD70A7DA0BA7EA31EE6006ECBF4BF51AC6CCC59C1AB30ECFB4436E5CA7FAB75B1ADE542C5F6BD8E530EE91A579BA6419B9F51F944FA25C1117CEAC2EA9CE464911AE43FF7E61361430001C265E3FD3E017B70F433DC410D54490DBCDD22C8A24525623F0017780A7710F32FF43A38BB718A11FEA2C59512A90CC6AF2210CE4C34B566DEAD213CF55A2A6B15A56AEE44C7C935F51943CB9D83A7040E2A76DCB514E4FB337578B177A761980ECB2AA10C5E9A30DD6FB2FA3C3D4A6AF472CC366F406BD875C3033EA559F1E6614DF2AE5F01EA6F6930161AF48F91A7CA843D987917B35DB6EC219C8D2969AEF79F7014AC01DD28E4F87CA0F8935D8AB36328A1330F1A3A7DB45F21483EE9B2573AEA5B5BA825C2CDF4F39BCF9C0177B0F76A70EB83F6B8E879EB28F7F0FDD34089AF37E3BFE7BD4D67B11290DC87A0B74C0AC8516FBDBFFD5D26C70A6274CB5C7CEBAF2B117A014B71F842BB6148A6AA43AB9A7D93D717A90EE40DC1AAE8319D2745C56EF317F8BC1BE54E37BBC5FF571A92851253936948BF7CE8518CB556553B4462863DA0335C59DAF1323FEE6654679923D9D6283B5630A0A9A30F8CC35C76B1EBB87C62DE2E6C3EE0D8BF2D471CFFDD4583F6BD2A4B05F595BB76480CEABC34C45F385A838385EE0386E1402E1299EB791009707075F8546079E96F27A089C48EEADED5D2C7CEFB47D6A505EC8A20E5F1EC63CFB4B94DFB2E3B4CF46AD6C0F93B8733B81848D89D40F7CAEA5230788FB2C3C2220A59D04EC5F49C58E426023069233534D0FF520907CA2885C84ED6CD520149CA3ECF4BD57165B66032E6591980D71015A692B3B3357575E03E3AC3418845D5B3DE3A03B245C8198A2FF9CF2C39C3B1A69E310DE7F07823E032324835A46B322AEE1D5FEFCCE622E6C4536A66CD592C10981722932CE0EC206611F91436834FFA6EE87A62E

3DDAF7E236A89CEC710C659F2524D6BFD35F6E74108DC4E19CBD9548792C9A7D3D5CC72A04F2A37CAB2EDD3AF4386CF6DA064846AEBA3437EB629583459BDC2B8F59EA48DC3DB4ABDA98DE770B88C43565EC02F4DD7DA361073FF0F5F8785E470963386B7F5E0F708391C3E805D306293D89E5DB495EA85418AABC1ABB6E0BE3FE14BA0DF9FB8BC9D72FC04C4FC65B64E7EA42F3D1CBA7C2CF7D18B735E2959D6778BF04647EC4FF9AB254E670F14689ED5D27C5D869F4BFF45164C9F32151FD8A74FD2D100B547C8665AAC13FC6CB040E4FF503375AED228417B0EC526F37A687908E6EB3F436908D20E69122D983027AB4A8D5B31809856BD8B16DD8B3C4FA05D855C4A1520571CED346423501B06B33D579BC637857E7C4E60FA08DC1E598EC1EFDF60DDEB5FBABD86DDA920AAD70B3B90E62B525EDC760076025CE113696D1287171BCE68C5E110E5E48D193739126177A852F0D25BB30C1BCF1473B28FD575F4A634922A228ADAC239DEC71A05B361540C4FCFB89D95E68533BA599CAF7B4DCAE9E1A6B27D476C8372DBF9839A8A68E04A57CFB9E4298C4BC905CED1590AD2E2B6C4C8D3DB73A65C1EEB2764AEA8EC9CB0C9AC1C85E4D2372596EEB2A729FE40311218D7A9BE9E8D77BDBC7C72E03DCC646DBADAD68505E1743BE7AF9EDE152464215B094DA9ECF62464CEEBC52D6ABCEE80D0E0671D90DECBBEAA1BF229137BFD933F6240200EB437E286BC5E6E4713227550A5C5436CBA85B4914CBA391A69BE9DD608246A0887C7843E99211239FF3220AE0FDD6EC6D8EB2F6CD44A19A817919CE7F9BC1E30646CE5B59CF37822B96A629BC4187BD912EAD5358A415BB88A38CBE71492992A154EF26EDA3FE73D84A356C66AFAA8D33F2B8DFDEF89D229EEB1160D70CB988714F5E8215C9FEE89F8708E13B5911251F995D1B0D9D6ADBA523D94F0C6DBC8F8C7056685DA118378C414F2B421F15DF76B0D7F96DAE1835E4395EEA4A141F70AAF3CD606DD2174D3FF5B7B0C1963B83762201489B10B8226C97AA04FE648B02703408C30E10A339613C49732BE48A8B07810E3F1233A75E7CC9E2D1D4E3BD1F9721925C182B626DA3DABA1641DCF0896704839C2C02F7C849180129335B2E17E107C8F5327C9D47A43C205A78C91114FBEDBBB4E96FCCD4062FF6DC6C3D30D26DB9952761E066C48D6346B8D00D77D30BBBC5E9A72E891B2D430AF7FB337204A885189EDF48EF22B45076BCFFBE91C26F559F9061827D9A1A2EC28E5CC607C8C18DB1B5F54E40C2EC62FB71911248E986864834C5A7FB82FB1D88C4194B988A59EB028C3CA641A05B7FB2D5C1FD14449E71A88B7131F732D7E8C1B66D9878A00D3FB23ACD44454DEB6E825E9D0B07138332BA75666DA45E2C5AE592892B00796BD20F04BEEBAAB5A7599D83A7F59F0E515DE8C1CB2D41

5400FCF6E98E1A2B0E784421FB027DE2622BCB838E529E2FCCCD4D5A876B405B48466DC6171C608DFEF6836FF78294C97DE21C5FE89A2DE5F3529B0AFFBFC41F69EFA3EE11F0A13B6CFBBA7664EF689840C79D66B84782E3AC6CB45009CE0AF7FA1A1A6CAF547CBCDAD13DEF0AA5FA8689FE527A708A2AB5FE8670B35413F97EA5DC701BB9449E0DE726DA06245B873A97732967EEC46AFFE4D85BBC2516FB658C2FC979A231DF394F00FE7857AA8A5F00E8936C71B0D72C560DCCC6407DBCDC8B81A5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 635 461 rc
1 460.5 m
634 460.5 l
634 1 l
1 1 l
h
1 460.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
111 61.5 m
744 61.5 l
744 521 l
111 521 l
h
111 61.5 m
S
0 i
1 1 1 sc
CM
342 420 m
490 420 l
490 345.5 l
342 345.5 l
h
342 420 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
452 102 m
600 102 l
600 176.5 l
452 176.5 l
h
452 102 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 416 382.75 cm
/F1.1[ 16 0 0 -16 0 0]sf
-21.488001 5.776001 m
(!"#$)[ 12.144000 8.592000 13.648000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
216.5 253 m
342 253 l
342 171 l
216.5 171 l
h
216.5 253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
326.5 269 m
452 269 l
452 351 l
326.5 351 l
h
326.5 269 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 279.25 212 cm
-20.728001 5.776001 m
(%&'\(\))[ 13.904000 9.184000 5.328000 3.552000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
490 253 m
615.5 253 l
615.5 171 l
490 171 l
h
490 253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
600 269 m
725.5 269 l
725.5 351 l
600 351 l
h
600 269 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 552.75 212 cm
-20.16 5.776001 m
(*$+,)[ 13.936000 8.592000 8.896000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -110 522 cm
494.29193 178.8416 m
428.27463 261.27271 l
S
0 J
0 j
0 i
423.27374 267.517 m
430.61624 263.14804 l
425.93304 259.39737 l
h
423.27374 267.517 m
S
496.49698 179.48183 m
494.85016 179.66391 493.36755 178.47652 493.18546 176.8297 c
493.00336 175.18288 494.19077 173.70026 495.83759 173.51817 c
497.48441 173.33609 498.96701 174.52348 499.14911 176.1703 c
499.33121 177.81712 498.1438 179.29974 496.49698 179.48183 c
S
1 J
1 j
0.60000002 i
557.70807 178.8416 m
623.72534 261.27271 l
S
0 J
0 j
0 i
628.72626 267.517 m
626.06696 259.39737 l
621.38379 263.14804 l
h
628.72626 267.517 m
S
558.81458 176.8297 m
558.63245 178.47652 557.14984 179.66391 555.50305 179.48183 c
553.8562 179.29974 552.66882 177.81712 552.85089 176.1703 c
553.03296 174.52348 554.51562 173.33609 556.16241 173.51817 c
557.80927 173.70026 558.99664 175.18288 558.81458 176.8297 c
S
1 1 1 sc
CM
442.39188 319.22141 m
515.39185 319.22141 l
515.39185 289.22141 l
442.39188 289.22141 l
h
442.39188 319.22141 m
f
0 0.21569 0.46274999 sc
1 0 0 -1 478.89188 304.22141 cm
-31.256001 5.776001 m
(-.*/.0)[ 4.144000 11.552000 13.936000 9.776000 11.552000 0.000000 ] xS
1 1 1 sc
CM
316.55725 318.53357 m
388.55725 318.53357 l
388.55725 288.53357 l
316.55725 288.53357 l
h
316.55725 318.53357 m
f
0 0.21569 0.46274999 sc
1 0 0 -1 352.55725 303.53357 cm
-30.959999 5.776001 m
(-.!1*/)[ 4.144000 11.552000 12.144000 10.368000 13.936000 0.000000 ] xS
1 1 1 sc
CM
81.5 88.5 m
192 88.5 l
192 31 l
81.5 31 l
h
81.5 88.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
191.5 433.5 m
302 433.5 l
302 491 l
191.5 491 l
h
191.5 433.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 136.75 59.75 cm
-22.224001 5.776001 m
(2",3$)[ 10.368000 8.592000 8.896000 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
340 88.610703 m
450.5 88.610703 l
450.5 31.110701 l
340 31.110701 l
h
340 88.610703 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
450 433.38931 m
560.5 433.38931 l
560.5 490.88931 l
450 490.88931 l
h
450 433.38931 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 395.25 59.860699 cm
-24.896 -3.447998 m
(/+\)4+56)[ 9.776000 8.896000 9.488000 3.552000 8.896000 9.184000 0.000000 ] xS
-25.040001 15 m
(78'$$+)[ 10.368000 8.592000 5.040000 8.592000 8.592000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -110 522 cm
348.82559 353.19031 m
280.42395 426.27203 l
S
0 J
0 j
0 i
274.95721 432.11282 m
282.61426 428.32205 l
278.23367 424.22202 l
h
274.95721 432.11282 m
S
350.97479 353.99835 m
349.31885 354.05313 347.93204 352.75513 347.87726 351.09918 c
347.82248 349.44324 349.12048 348.05643 350.77643 348.00165 c
352.43237 347.94687 353.81921 349.24487 353.87399 350.90082 c
353.92874 352.55676 352.63074 353.94357 350.97479 353.99835 c
S
1 J
1 j
0.60000002 i
422.3298 353.38565 m
477.32672 425.51663 l
S
0 J
0 j
0 i
482.17728 431.87839 m
479.71237 423.69766 l
474.94104 427.3356 l
h
482.17728 431.87839 m
S
423.48395 351.40073 m
423.26263 353.04272 421.75214 354.19443 420.11011 353.97311 c
418.46811 353.7518 417.31641 352.2413 417.53772 350.59927 c
417.75903 348.95728 419.26953 347.80557 420.91153 348.02689 c
422.55356 348.2482 423.70526 349.7587 423.48395 351.40073 c
S
1 1 1 sc
CM
287.88354 150.75522 m
386.88354 150.75522 l
386.88354 120.75523 l
287.88354 120.75523 l
h
287.88354 150.75522 m
f
0 0.21569 0.46274999 sc
1 0 0 -1 337.38354 135.75522 cm
-44.448002 5.776001 m
(!1*/9:/;)[ 12.144000 10.368000 13.936000 9.776000 12.160000 9.776000 9.776000 0.000000 ] xS
1 1 1 sc
CM
165.04091 146.11081 m
242.04091 146.11081 l
242.04091 116.11081 l
165.04091 116.11081 l
h
165.04091 146.11081 m
f
0 0.21569 0.46274999 sc
1 0 0 -1 203.54091 131.11081 cm
-33.472 5.776001 m
(-.2107/)[ 4.144000 11.552000 9.184000 10.368000 11.552000 10.368000 0.000000 ] xS
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -110 522 cm
326.5 292.5 m
175 292.5 l
172 292.5 l
172 333.5 l
316.60001 333.5 l
S
0 J
0 j
0 i
324.60001 333.5 m
316.60001 330.5 l
316.60001 336.5 l
h
324.60001 333.5 m
S
1 1 1 sc
CM
16 223.69029 m
108 223.69029 l
108 193.69029 l
16 193.69029 l
h
16 223.69029 m
f
0 0.21569 0.46274999 sc
1 0 0 -1 62 208.69029 cm
-40.584 5.776001 m
(-72<1=-.!)[ 4.144000 10.368000 10.368000 8.896000 9.184000 10.368000 4.144000 11.552000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
